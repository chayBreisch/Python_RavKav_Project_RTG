# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\projects\pythonProject\CHBui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from client.client_TCP import Client
from PyQt5.QtCore import Qt, QEvent
from enum import IntEnum


class Request(IntEnum):
    CREATE = 1
    CHECK_STATUS = 2
    PAY = 3
    FILL_WALLET = 4
    CHANGE_CONTRACT = 5


class Ui_MainWindow(object):
    def __init__(self):
        try:
            self.client = Client("192.168.56.1", 61761)
        except:
            raise Exception(f"Failed to connect to the server.  :(")
        self.request = None
        self.centralwidget = None
        self.input_frame = None
        self.user_id_label = None
        self.card_number_label = None
        self.wallet_label = None
        self.contract_label = None
        self.user_id_input = None
        self.wallet_input = None
        self.contract_input = None
        self.card_number_input = None
        self.send_button = None
        self.options_frame = None
        self.createCard_button = None
        self.getData_button = None
        self.payRide_button = None
        self.fillWallet_button = None
        self.changeContract = None
        self.menubar = None
        self.menuRavKav = None
        self.statusbar = None
        self.actionExit = None
        self.back_button = None
        self.textBrowser = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.input_frame = QtWidgets.QFrame(self.centralwidget)
        self.input_frame.setGeometry(QtCore.QRect(150, 100, 441, 341))
        self.input_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.input_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.input_frame.setObjectName("input_frame")
        self.user_id_label = QtWidgets.QLabel(self.input_frame)
        self.user_id_label.setGeometry(QtCore.QRect(50, 50, 111, 41))
        self.user_id_label.setObjectName("user_id_label")
        self.card_number_label = QtWidgets.QLabel(self.input_frame)
        self.card_number_label.setGeometry(QtCore.QRect(50, 100, 101, 41))
        self.card_number_label.setObjectName("card_number_label")
        self.wallet_label = QtWidgets.QLabel(self.input_frame)
        self.wallet_label.setGeometry(QtCore.QRect(50, 160, 101, 31))
        self.wallet_label.setObjectName("wallet_label")
        self.contract_label = QtWidgets.QLabel(self.input_frame)
        self.contract_label.setGeometry(QtCore.QRect(50, 210, 101, 41))
        self.contract_label.setObjectName("contract_label")
        self.user_id_input = QtWidgets.QLineEdit(self.input_frame)
        self.user_id_input.setGeometry(QtCore.QRect(110, 51, 191, 31))
        self.user_id_input.setObjectName("user_id_input")
        self.wallet_input = QtWidgets.QSpinBox(self.input_frame)
        self.wallet_input.setGeometry(QtCore.QRect(110, 160, 91, 31))
        self.wallet_input.setMaximum(9999)
        self.wallet_input.setObjectName("wallet_input")
        self.contract_input = QtWidgets.QComboBox(self.input_frame)
        self.contract_input.setGeometry(QtCore.QRect(110, 211, 191, 31))
        self.contract_input.setObjectName("contract_input")
        self.contract_input.addItem("")
        self.contract_input.addItem("")
        self.contract_input.addItem("")
        self.contract_input.addItem("")
        self.card_number_input = QtWidgets.QLineEdit(self.input_frame)
        self.card_number_input.setGeometry(QtCore.QRect(140, 101, 161, 31))
        self.card_number_input.setObjectName("card_number_input")
        self.send_button = QtWidgets.QPushButton(self.input_frame)
        self.send_button.setGeometry(QtCore.QRect(170, 270, 93, 28))
        self.send_button.setObjectName("send_button")
        self.options_frame = QtWidgets.QFrame(self.centralwidget)
        self.options_frame.setGeometry(QtCore.QRect(-20, 30, 461, 351))
        self.options_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.options_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.options_frame.setObjectName("options_frame")
        self.createCard_button = QtWidgets.QPushButton(self.options_frame)
        self.createCard_button.setGeometry(QtCore.QRect(130, 40, 221, 41))
        self.createCard_button.setObjectName("createCard_button")
        self.getData_button = QtWidgets.QPushButton(self.options_frame)
        self.getData_button.setGeometry(QtCore.QRect(130, 90, 221, 41))
        self.getData_button.setObjectName("getData_button")
        self.payRide_button = QtWidgets.QPushButton(self.options_frame)
        self.payRide_button.setGeometry(QtCore.QRect(130, 140, 221, 41))
        self.payRide_button.setObjectName("payRide_button")
        self.fillWallet_button = QtWidgets.QPushButton(self.options_frame)
        self.fillWallet_button.setGeometry(QtCore.QRect(130, 190, 221, 41))
        self.fillWallet_button.setObjectName("fillWallet_button")
        self.changeContract = QtWidgets.QPushButton(self.options_frame)
        self.changeContract.setGeometry(QtCore.QRect(130, 240, 221, 41))
        self.changeContract.setObjectName("changeContract")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuRavKav = QtWidgets.QMenu(self.menubar)
        self.menuRavKav.setObjectName("menuRavKav")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QPushButton(self.centralwidget)
        # self.actionExit = QtWidgets.QPushButton(self.input_frame)
        self.actionExit.setGeometry(QtCore.QRect(50, 10, 93, 28))
        self.actionExit.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.actionExit.setObjectName("actionExit")
        # self.menuRavKav.addAction(self.actionExit)
        self.menubar.addAction(self.menuRavKav.menuAction())
        self.back_button = QtWidgets.QPushButton(self.input_frame)
        self.back_button.setGeometry(QtCore.QRect(0, 0, 93, 28))
        self.back_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.back_button.setObjectName("back_btn")
        self.textBrowser = QtWidgets.QTextBrowser(self.input_frame)
        self.textBrowser.setGeometry(QtCore.QRect(150, 0, 151, 41))
        self.textBrowser.setObjectName("textBrowser")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.display_inputs(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.user_id_label.setText(_translate("MainWindow", "User Id:"))
        self.card_number_label.setText(_translate("MainWindow", "Card Number:"))
        self.wallet_label.setText(_translate("MainWindow", "Wallet:"))
        self.contract_label.setText(_translate("MainWindow", "Contract:"))
        self.contract_input.setItemText(0, _translate("MainWindow", "NONE"))
        self.contract_input.setItemText(1, _translate("MainWindow", "NORTH"))
        self.contract_input.setItemText(2, _translate("MainWindow", "CENTER"))
        self.contract_input.setItemText(3, _translate("MainWindow", "SOUTH"))
        self.send_button.setText(_translate("MainWindow", "Send"))
        self.createCard_button.setText(_translate("MainWindow", "Create Card"))
        self.getData_button.setText(_translate("MainWindow", "Get Data"))
        self.payRide_button.setText(_translate("MainWindow", "Pay for Ride"))
        self.fillWallet_button.setText(_translate("MainWindow", "Fill Wallet"))
        self.changeContract.setText(_translate("MainWindow", "Change Contract"))
        self.menuRavKav.setTitle(_translate("MainWindow", "RavKav"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.send_button.clicked.connect(self.send_request)
        self.createCard_button.clicked.connect(self.edit_create_card)
        self.getData_button.clicked.connect(self.edit_get_data)
        self.payRide_button.clicked.connect(self.display_pay_ride)
        self.back_button.clicked.connect(self.reset_screen)
        self.fillWallet_button.clicked.connect(self.display_fill_wallet)
        self.changeContract.clicked.connect(self.display_change_contract)
        self.actionExit.clicked.connect(self.exit)
        self.back_button.setText(_translate("MainWindow", "<-"))

    def display_user_id(self, visible):
        self.user_id_input.setVisible(visible)
        self.user_id_input.setVisible(visible)
        self.user_id_input.setText("")

    def display_card_id(self, visible):
        self.card_number_input.setVisible(visible)
        self.card_number_input.setVisible(visible)
        self.card_number_input.setText("")

    def display_wallet(self, visible):
        self.wallet_input.setVisible(visible)
        self.wallet_input.setVisible(visible)
        self.wallet_input.setValue(0)

    def display_contract(self, visible):
        self.contract_input.setVisible(visible)
        self.contract_input.setVisible(visible)
        self.contract_input.setCurrentText("NONE")

    def edit_card_id(self, edit):
        self.card_number_input.setEnabled(edit)

    def edit_wallet(self, edit):
        self.wallet_input.setEnabled(edit)

    def edit_contract(self, edit):
        self.contract_input.setEnabled(edit)

    def edit_user_id(self, edit):
        self.user_id_input.setEnabled(edit)

    def display_options(self, display):
        self.options_frame.setVisible(display)

    def display_inputs(self, display):
        self.input_frame.setVisible(display)

    def display_pay_ride(self):
        self.change_to_inputs()
        self.edit_user_id(False)
        self.edit_wallet(False)
        self.request = '3'

    def display_change_contract(self):
        self.change_to_inputs()
        self.edit_user_id(False)
        self.edit_wallet(False)
        self.request = '5'

    def display_fill_wallet(self):
        self.change_to_inputs()
        self.edit_user_id(False)
        self.edit_contract(False)
        self.request = '4'

    def edit_create_card(self):
        self.change_to_inputs()
        self.edit_card_id(False)
        self.request = '1'

    def edit_get_data(self):
        self.change_to_inputs()
        self.edit_user_id(False)
        self.edit_wallet(False)
        self.edit_contract(False)
        self.request = '2'

    def change_to_inputs(self):
        self.display_inputs(True)
        self.display_options(False)

    def exit(self):
        self.client.close_connection_server()
        QtWidgets.QApplication.quit()

    def reset_screen(self):
        self.display_inputs(False)
        self.display_options(True)
        self.display_user_id(True)
        self.display_card_id(True)
        self.display_wallet(True)
        self.display_contract(True)
        self.edit_user_id(True)
        self.edit_card_id(True)
        self.edit_wallet(True)
        self.edit_contract(True)
        self.textBrowser.setText("")

    def eventFilter(self, obj, event):
        if event.type() == QEvent.Close:
            self.client.close_connection_server()
        return super().eventFilter(obj, event)

    def send_request(self):
        try:
            if int(self.request) == Request.CREATE:
                user_id = self.user_id_input.text()
                contract_name = self.contract_input.currentText().upper()
                wallet = self.wallet_input.value()
                ans = self.client.connect(self.request,
                                          dict(user_id=user_id, contract_name=contract_name, wallet=wallet))
                if ans['status'] == "Done":
                    self.card_number_input.setText(ans['card_id'])
                self.textBrowser.setText(ans['status'])
            elif int(self.request) == Request.CHECK_STATUS:
                card_id = self.card_number_input.text()
                ans = self.client.connect(self.request, dict(card_id=card_id))
                if ans['status'] == "Done":
                    self.contract_input.setCurrentText(ans['contract_name'])
                    self.wallet_input.setValue(int(ans['wallet']))
                self.textBrowser.setText(ans['status'])
            elif int(self.request) == Request.PAY or int(self.request) == Request.CHANGE_CONTRACT:
                card_id = self.card_number_input.text()
                contract_name = self.contract_input.currentText().upper()
                ans = self.client.connect(self.request, dict(card_id=card_id, contract_name=contract_name))
                self.textBrowser.setText(ans['status'])
            elif int(self.request) == Request.FILL_WALLET:
                card_id = self.card_number_input.text()
                wallet = self.wallet_input.value()
                ans = self.client.connect(self.request, dict(card_id=card_id, wallet=wallet))
                self.textBrowser.setText(ans['status'])
        except:
            self.textBrowser.setText("connection stopped")
